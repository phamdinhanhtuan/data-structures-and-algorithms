#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Cấu trúc nhân viên
struct NhanVien {
    char ten[50];
    char maNV[10];
    float hsl;
    float pc;
    char maPhong[10];
    struct NhanVien* next;
};

typedef struct NhanVien* LinkedList;

// 1. Tạo node mới
struct NhanVien* taoNode(char* ten, char* ma, float hsl, float pc, char* phong) {
    struct NhanVien* newNode = (struct NhanVien*)malloc(sizeof(struct NhanVien));
    strcpy(newNode->ten, ten);
    strcpy(newNode->maNV, ma);
    newNode->hsl = hsl;
    newNode->pc = pc;
    strcpy(newNode->maPhong, phong);
    newNode->next = NULL;
    return newNode;
}

// 2. Tính lương
float tinhLuong(float hsl, float pc) {
    return hsl * 2000 + pc;
}

// 3. Thêm nhân viên mới
void themNhanVien(LinkedList* list, char* ten, char* ma, float hsl, float pc, char* phong) {
    struct NhanVien* newNode = taoNode(ten, ma, hsl, pc, phong);
    newNode->next = *list;
    *list = newNode;
}

// 4. Tìm nhân viên có lương cao nhất
struct NhanVien* timLuongCaoNhat(LinkedList list) {
    if (list == NULL) return NULL;
    
    struct NhanVien* maxNode = list;
    float maxLuong = tinhLuong(list->hsl, list->pc);
    
    list = list->next;
    while (list != NULL) {
        float luong = tinhLuong(list->hsl, list->pc);
        if (luong > maxLuong) {
            maxLuong = luong;
            maxNode = list;
        }
        list = list->next;
    }
    return maxNode;
}

// 5. Tính lương trung bình theo phòng ban
float tinhLuongTBTheoPhong(LinkedList list, char* maPhong) {
    float tongLuong = 0;
    int soNV = 0;
    
    while (list != NULL) {
        if (strcmp(list->maPhong, maPhong) == 0) {
            tongLuong += tinhLuong(list->hsl, list->pc);
            soNV++;
        }
        list = list->next;
    }
    
    return soNV > 0 ? tongLuong/soNV : 0;
}

// 6. Sắp xếp theo lương giảm dần
void sapXepTheoLuong(LinkedList* list) {
    if (*list == NULL || (*list)->next == NULL) return;
    
    struct NhanVien* i, *j;
    char tempTen[50], tempMa[10], tempPhong[10];
    float tempHsl, tempPc;
    
    for (i = *list; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (tinhLuong(i->hsl, i->pc) < tinhLuong(j->hsl, j->pc)) {
                // Hoán đổi thông tin
                strcpy(tempTen, i->ten);
                strcpy(tempMa, i->maNV);
                tempHsl = i->hsl;
                tempPc = i->pc;
                strcpy(tempPhong, i->maPhong);
                
                strcpy(i->ten, j->ten);
                strcpy(i->maNV, j->maNV);
                i->hsl = j->hsl;
                i->pc = j->pc;
                strcpy(i->maPhong, j->maPhong);
                
                strcpy(j->ten, tempTen);
                strcpy(j->maNV, tempMa);
                j->hsl = tempHsl;
                j->pc = tempPc;
                strcpy(j->maPhong, tempPhong);
            }
        }
    }
}

// 7. Hiển thị danh sách
void hienThiDS(LinkedList list) {
    printf("\nDanh sach nhan vien:\n");
    printf("%-30s %-10s %-10s %-10s %-10s %-15s\n", 
           "Ten", "Ma NV", "HSL", "PC", "Ma Phong", "Luong");
    printf("-----------------------------------------------------------\n");
    
    while (list != NULL) {
        printf("%-30s %-10s %-10.2f %-10.2f %-10s %-15.2f\n",
               list->ten, list->maNV, list->hsl, list->pc, 
               list->maPhong, tinhLuong(list->hsl, list->pc));
        list = list->next;
    }
}

int main() {
    LinkedList list = NULL;
    int choice;
    char ten[50], ma[10], phong[10];
    float hsl, pc;
    
    do {
        printf("\n=== QUAN LY NHAN VIEN ===\n");
        printf("1. Them nhan vien\n");
        printf("2. Tim nhan vien luong cao nhat\n");
        printf("3. Tinh luong TB theo phong\n");
        printf("4. Sap xep theo luong giam dan\n");
        printf("5. Hien thi danh sach\n");
        printf("0. Thoat\n");
        printf("Chon chuc nang: ");
        scanf("%d", &choice);
        
        switch(choice) {
            case 1:
                printf("Nhap ten: "); scanf(" %[^\n]s", ten);
                printf("Nhap ma: "); scanf("%s", ma);
                printf("Nhap he so luong: "); scanf("%f", &hsl);
                printf("Nhap phu cap: "); scanf("%f", &pc);
                printf("Nhap ma phong: "); scanf("%s", phong);
                themNhanVien(&list, ten, ma, hsl, pc, phong);
                break;
            case 2:
                {
                    struct NhanVien* max = timLuongCaoNhat(list);
                    if (max != NULL) {
                        printf("\nNhan vien luong cao nhat:\n");
                        printf("Ten: %s\n", max->ten);
                        printf("Luong: %.2f\n", tinhLuong(max->hsl, max->pc));
                    }
                }
                break;
            case 3:
                printf("Nhap ma phong: "); scanf("%s", phong);
                printf("Luong TB phong %s: %.2f\n", 
                       phong, tinhLuongTBTheoPhong(list, phong));
                break;
            case 4:
                sapXepTheoLuong(&list);
                printf("Da sap xep danh sach theo luong!\n");
                break;
            case 5:
                hienThiDS(list);
                break;
        }
    } while (choice != 0);
    
    return 0;
}
